package projecteuler.pe11_20;

import java.util.TreeSet;

public class PE012 {
//  The sequence of triangle numbers is generated by adding the natural numbers. 
//	So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
//	The first ten terms would be:
//
//		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//	Let us list the factors of the first seven triangle numbers:
//
//		 1: 1
//		 3: 1,3
//		 6: 1,2,3,6
//		10: 1,2,5,10
//		15: 1,3,5,15
//		21: 1,3,7,21
//		28: 1,2,4,7,14,28
//
//		We can see that 28 is the first triangle number to have over five divisors.
//
//		What is the value of the first triangle number to have over five hundred divisors?
	public static void main(String[] args) {
		int tri = 0;
		int i = 1;
		while(true){
			tri += i++;
			if (getDivisors(tri).size() > 500){
				break;
			}
		}
		System.out.println("First triangle number with > 500 divisors: " + tri);
		System.out.println("Verified answer from Project Euler: 76576500");
	}
	
	public static TreeSet<Integer> getDivisors(int num){
		TreeSet<Integer> factors = new TreeSet();
		factors.add(1);
		factors.add(num);
		for (int i = 2; i <= (int) Math.sqrt(num) + 1; i++){
			if (num % i == 0){
				factors.add(i);
				factors.add(num / i);
			}
		}
		return factors;
	}
}
